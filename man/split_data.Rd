% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/split_data.R
\name{split_data}
\alias{split_data}
\title{Split the data into training and testing}
\usage{
split_data(data, n_init, n_ahead, n_skip = 0, n_lag = 0, mode = "slide")
}
\arguments{
\item{data}{A valid \code{tsibble} in long format provided by the function \code{check_data()}.}

\item{n_init}{Integer value. The number of periods for the initial training window (must be positive).}

\item{n_ahead}{Integer value. The forecast horizon (n-steps-ahead, must be positive).}

\item{n_skip}{Integer value. The number of periods to skip between windows (must be zero or positive integer).}

\item{n_lag}{Integer value. A value to include a lag between the training and testing set. This is useful if lagged predictors will be used during training and testing.}

\item{mode}{Character value. Define the setup of the training window for time series cross validation. \code{stretch} is equivalent to an expanding window approach and \code{slide} is a fixed window approach.}
}
\value{
data A \code{tsibble} in the same format as the input data, but with the following additional columns:
   \itemize{
      \item{\code{sample}: Character value. Indicating whether the partition is training or testing.}
      \item{\code{split}: Integer value. The number of the time slice (training and testing).}
      \item{\code{id}: Integer value. The row number of the corresponding observations.}
      \item{\code{horizon}: Integer value. The forecast horizon (i.e. the size of the testing window. NAs for training.}
      }
}
\description{
This function splits the data into training and testing samples
  (i.e. partitioning into time slices) for time series cross-validation. The
  user can choose between \code{stretch} and \code{slide}. The first is an
  expanding window approach, while the latter is a fixed window approach.
  The user can define the window sizes for training and testing via
  \code{n_init} and \code{n_ahead}, as well as the step size for increments
  via \code{n_step}.
}
